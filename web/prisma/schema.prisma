generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refreshToken      String? @db.Text @map("refresh_token")
  accessToken       String? @db.Text @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope              String?
  idToken           String? @db.Text @map("id_token")
  sessionState      String? @map("session_state")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   @db.VarChar(255)
  stripeCustomerId       String?          @unique @map("stripe_customer_id")
  stripePaymentMethodId  String?          @map("stripe_payment_method_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts               Account[]
  createdQuizzes         Quiz[]           @relation("QuizCreator")
  quizResponses          QuizResponse[]
  sessions               Session[]
  createdTeams           Team[]           @relation("TeamCreator")
  TeamInvitation         TeamInvitation[]
  teamMembers            TeamMember[]
  storage                UserStorage?
  createdBankQuestions   BankQuestion[]
  createdCertificateTemplates CertificateTemplate[]
  passwordResetTokens    PasswordResetToken[]
  notifications          Notification[] @relation("UserNotifications")
  notificationPreferences NotificationPreference? @relation("UserNotificationPreferences")

  @@index([stripeCustomerId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id           String           @id @default(cuid())
  name         String
  slug         String           @unique @db.VarChar(50)
  description  String?
  logo         String?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  creatorId    String           @map("creator_id")
  lmsConfiguration Json?        @map("lms_configuration") // LMS mode configuration
  invoices     Invoice[]
  quizzes      Quiz[]
  subscription Subscription?
  creator      User             @relation("TeamCreator", fields: [creatorId], references: [id])
  invitations  TeamInvitation[]
  members      TeamMember[]
  teamSettings TeamSettings?
  usageRecords UsageRecord[]
  categories   Category[]
  bankQuestions BankQuestion[]
  certificateTemplates CertificateTemplate[]
  tags         Tag[]
  notifications Notification[] @relation("TeamNotifications")

  @@index([creatorId])
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now()) @map("joined_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  teamId    String   @map("team_id")
  userId    String   @map("user_id")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId])
  @@map("team_members")
}

model TeamInvitation {
  id          String               @id @default(cuid())
  email       String
  token       String               @unique @default(cuid())
  status      TeamInvitationStatus @default(PENDING)
  role        TeamRole             @default(MEMBER)
  expiresAt   DateTime             @map("expires_at")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  teamId      String               @map("team_id")
  invitedById String               @map("invited_by_id")
  invitedBy   User                 @relation(fields: [invitedById], references: [id])
  team        Team                 @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([email])
  @@index([token])
  @@index([status])
  @@map("team_invitations")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model TeamSettings {
  id                    String      @id @default(cuid())
  maxMembers            Int         @default(5) @map("max_members")
  allowMemberInvite     Boolean     @default(false) @map("allow_member_invite")
  requireApproval       Boolean     @default(true) @map("require_approval")
  defaultQuizVisibility SharingMode @default(URL) @map("default_quiz_visibility")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")
  teamId                String      @unique @map("team_id")
  team                  Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_settings")
}

model Quiz {
  id                     String         @id @default(cuid())
  title                  String         @db.VarChar(200)
  description            String?
  status                 QuizStatus     @default(DRAFT)
  scoringType            ScoringType    @default(AUTO) @map("scoring_type")
  sharingMode            SharingMode    @default(URL) @map("sharing_mode")
  password               String?        @db.VarChar(100)
  passingScore           Int            @default(70) @db.SmallInt @map("passing_score")
  coverImage             String?        @map("cover_image")
  subdomain              String?        @unique @db.VarChar(30)
  timeLimit              Int?           @db.SmallInt @map("time_limit")
  shuffleQuestions       Boolean        @default(false) @map("shuffle_questions")
  shuffleOptions         Boolean        @default(false) @map("shuffle_options")
  maxAttempts            Int?           @db.SmallInt @map("max_attempts")
  publishedAt            DateTime?      @map("published_at")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  teamId                 String         @map("team_id")
  createdById            String         @map("created_by_id")
  aiMetadata             Json?          @map("ai_metadata") // AI generation metadata
  difficultyLevel        QuestionDifficulty? @map("difficulty_level")
  isPublic               Boolean        @default(false) @map("is_public")
  collectParticipantInfo Boolean        @default(false) @map("collect_participant_info")
  instructions           String?
  totalResponses         Int            @default(0) @map("total_responses")
  averageScore           Float          @default(0) @map("average_score")
  showAnswersAfterSubmit Boolean        @default(false) @map("show_answers_after_submit")
  allowMultipleAttempts  Boolean        @default(true) @map("allow_multiple_attempts")
  questions              Question[]
  createdBy              User           @relation("QuizCreator", fields: [createdById], references: [id], onDelete: Restrict)
  team                   Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  responses              QuizResponse[]
  tags                   QuizTag[]
  sections               Section[]
  certificateTemplates   QuizCertificateTemplate[]
  quizBankQuestions      QuizBankQuestion[]

  @@index([teamId])
  @@index([createdById])
  @@index([status])
  @@index([publishedAt])
  @@index([subdomain])
  @@index([teamId, status])
  @@index([isPublic])
  @@map("quizzes")
}

model Section {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(200)
  description String?
  order       Int        @db.SmallInt
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  quizId      String     @map("quiz_id")
  questions   Question[]
  quiz        Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([quizId, order])
  @@map("sections")
}

model Question {
  id              String             @id @default(cuid())
  type            QuestionType
  text            String
  points          Int                @default(1) @db.SmallInt
  order           Int                @db.SmallInt
  hint            String?
  explanation     String?
  correctAnswer   Json?              @map("correct_answer")
  gradingCriteria String?            @map("grading_criteria")
  isRequired      Boolean            @default(false) @map("is_required")
  isActive        Boolean            @default(true) @map("is_active")
  difficultyLevel QuestionDifficulty? @map("difficulty_level")
  sectionTimeLimit Int?              @db.SmallInt @map("section_time_limit") // Time limit in seconds for this question
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  quizId          String             @map("quiz_id")
  sectionId       String?            @map("section_id")
  quiz            Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  section         Section?           @relation(fields: [sectionId], references: [id])
  media           QuestionMedia[]
  options         QuestionOption[]
  responses       QuestionResponse[]
  quizBankQuestion QuizBankQuestion?

  @@index([quizId])
  @@index([sectionId])
  @@index([quizId, order])
  @@index([type])
  @@map("questions")
}

model QuestionOption {
  id         String   @id @default(cuid())
  text       String
  order      Int      @db.SmallInt
  isCorrect  Boolean  @default(false) @map("is_correct")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([questionId, order])
  @@map("question_options")
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String?
  teamId    String    @map("team_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  quizzes   QuizTag[]
  bankQuestions BankQuestionTag[]
  
  @@unique([teamId, name])
  @@index([teamId])
  @@map("tags")
}

model QuizTag {
  id     String @id @default(cuid())
  quizId String @map("quiz_id")
  tagId  String @map("tag_id")
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([quizId, tagId])
  @@index([quizId])
  @@index([tagId])
  @@map("quiz_tags")
}

model QuizResponse {
  id               String             @id @default(cuid())
  score            Int?               @db.SmallInt
  totalPoints      Int                @db.SmallInt @map("total_points")
  isPassed         Boolean?           @map("is_passed")
  startedAt        DateTime           @default(now()) @map("started_at")
  completedAt      DateTime?          @map("completed_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  quizId           String             @map("quiz_id")
  userId           String?            @map("user_id")
  participantName  String?            @db.VarChar(255) @map("participant_name")
  participantEmail String?            @db.VarChar(255) @map("participant_email")
  timeTaken        Int?               @map("time_taken") // Time taken in seconds
  responses        QuestionResponse[]
  quiz             Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user             User?              @relation(fields: [userId], references: [id])
  certificates     Certificate[]

  @@index([quizId])
  @@index([userId])
  @@index([completedAt])
  @@index([quizId, completedAt])
  @@index([quizId, isPassed])
  @@index([participantEmail])
  @@map("quiz_responses")
}

model QuestionResponse {
  id             String       @id @default(cuid())
  answer         Json
  score          Int?         @db.SmallInt
  isCorrect      Boolean?     @map("is_correct")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  quizResponseId String       @map("quiz_response_id")
  questionId     String       @map("question_id")
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizResponse   QuizResponse @relation(fields: [quizResponseId], references: [id], onDelete: Cascade)

  @@unique([quizResponseId, questionId])
  @@index([quizResponseId])
  @@index([questionId])
  @@index([isCorrect])
  @@map("question_responses")
}

model Plan {
  id                     String         @id @default(cuid())
  type                   PlanType       @unique
  name                   String
  description            String?
  monthlyPrice           Int            @map("monthly_price")
  yearlyPrice            Int            @map("yearly_price")
  stripeMonthlyProductId String?        @unique @map("stripe_monthly_product_id")
  stripeYearlyProductId  String?        @unique @map("stripe_yearly_product_id")
  maxQuizzes             Int?           @map("max_quizzes")
  maxMembers             Int?           @map("max_members")
  maxQuestionsPerQuiz    Int?           @map("max_questions_per_quiz")
  maxResponsesPerMonth   Int?           @map("max_responses_per_month")
  maxStorageMB           Int?           @map("max_storage_mb")
  isActive               Boolean        @default(true) @map("is_active")
  displayOrder           Int            @default(0) @map("display_order")
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  monthlyPricePerMember  Int            @default(0) @map("monthly_price_per_member")
  yearlyPricePerMember   Int            @default(0) @map("yearly_price_per_member")
  includedMembers        Int            @default(1) @map("included_members")
  features               PlanFeature[]
  subscriptions          Subscription[]

  @@index([type])
  @@index([isActive])
  @@map("plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String             @unique @map("stripe_subscription_id")
  stripeCustomerId     String             @map("stripe_customer_id")
  stripePriceId        String             @map("stripe_price_id")
  stripeProductId      String             @map("stripe_product_id")
  status               SubscriptionStatus
  billingCycle         BillingCycle       @map("billing_cycle")
  trialStart           DateTime?          @map("trial_start")
  trialEnd             DateTime?          @map("trial_end")
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  planId               String             @map("plan_id")
  teamId               String             @unique @map("team_id")
  memberCount          Int                @default(1) @map("member_count")
  pricePerMember       Int                @default(0) @map("price_per_member")
  plan                 Plan               @relation(fields: [planId], references: [id])
  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@index([teamId])
  @@map("subscriptions")
}

model StripeEvent {
  id                String   @id @default(cuid())
  stripeEventId     String   @unique @map("stripe_event_id")
  type              String
  processed         Boolean  @default(false)
  processedAt       DateTime? @map("processed_at")
  error             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([stripeEventId])
  @@index([type])
  @@index([processed])
  @@index([createdAt])
  @@map("stripe_events")
}

model Invoice {
  id               String        @id @default(cuid())
  stripeInvoiceId  String        @unique @map("stripe_invoice_id")
  stripeCustomerId String        @map("stripe_customer_id")
  invoiceNumber    String        @map("invoice_number")
  status           InvoiceStatus
  subtotal         Int
  tax              Int           @default(0)
  total            Int
  amountPaid       Int           @default(0) @map("amount_paid")
  amountDue        Int           @map("amount_due")
  currency         String        @default("jpy")
  dueDate          DateTime?     @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  invoicePdf       String?       @map("invoice_pdf")
  hostedInvoiceUrl String?       @map("hosted_invoice_url")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  teamId           String        @map("team_id")
  team             Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([stripeInvoiceId])
  @@index([status])
  @@index([createdAt])
  @@index([teamId])
  @@map("invoices")
}

model UsageRecord {
  id           String       @id @default(cuid())
  resourceType ResourceType @map("resource_type")
  count        Int
  periodStart  DateTime     @map("period_start")
  periodEnd    DateTime     @map("period_end")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  teamId       String       @map("team_id")
  team         Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([resourceType])
  @@index([periodStart, periodEnd])
  @@index([teamId])
  @@index([teamId, resourceType, periodStart])
  @@map("usage_records")
}

model Feature {
  id            String          @id @default(cuid())
  type          FeatureType     @unique
  name          String
  nameEn        String          @map("name_en")
  description   String?
  descriptionEn String?         @map("description_en")
  category      FeatureCategory
  displayOrder  Int             @default(0) @map("display_order")
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  planFeatures  PlanFeature[]

  @@index([category])
  @@index([isActive])
  @@map("features")
}

model PlanFeature {
  id        String   @id @default(cuid())
  planId    String   @map("plan_id")
  featureId String   @map("feature_id")
  isEnabled Boolean  @default(true) @map("is_enabled")
  limit     Int?
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
  @@index([planId])
  @@index([featureId])
  @@map("plan_features")
}

model QuestionMedia {
  id         String    @id @default(cuid())
  url        String
  type       MediaType
  fileName   String    @map("file_name")
  fileSize   Int       @map("file_size")
  mimeType   String    @map("mime_type")
  order      Int       @default(0) @db.SmallInt
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  questionId String    @map("question_id")
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([questionId, order])
  @@map("question_media")
}

model UserStorage {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  usedBytes BigInt   @default(0) @map("used_bytes")
  maxBytes  BigInt   @default(10737418240) @map("max_bytes")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_storage")
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ScoringType {
  AUTO
  MANUAL
}

enum SharingMode {
  URL
  PASSWORD
}

enum QuestionType {
  TRUE_FALSE
  MULTIPLE_CHOICE
  CHECKBOX
  SHORT_ANSWER
  SORTING
  FILL_IN_BLANK
  DIAGRAM
  MATCHING
  NUMERIC
}

enum PlanType {
  FREE
  PRO
  PREMIUM
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum ResourceType {
  QUIZ
  RESPONSE
  STORAGE
  MEMBER
}

enum FeatureCategory {
  BASIC
  PRO
  PREMIUM
}

enum FeatureType {
  TRUE_FALSE_QUESTION
  SINGLE_CHOICE_QUESTION
  MULTIPLE_CHOICE_QUESTION
  FREE_TEXT_QUESTION
  ADVANCED_QUESTION_TYPES
  AUTO_GRADING
  MANUAL_GRADING
  PASSWORD_PROTECTION
  PERMISSIONS_MANAGEMENT
  AUDIT_LOG
  SUBDOMAIN
  CUSTOM_DESIGN
  CUSTOM_DEVELOPMENT
  MEDIA_UPLOAD
  QUESTION_BANK
  SECTIONS
  ANALYTICS
  EXCEL_EXPORT
  CERTIFICATES
  AI_QUIZ_GENERATION
  TEAM_MANAGEMENT
  PRIORITY_SUPPORT
  SLA_GUARANTEE
  ON_PREMISE
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TeamInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

// ============================================
// Question Bank Models
// ============================================

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String   @map("team_id")
  parentId    String?  @map("parent_id")
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  team                 Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  parent               Category?              @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children             Category[]             @relation("CategoryHierarchy")
  bankQuestionCategories BankQuestionCategory[]
  
  @@index([teamId])
  @@index([parentId])
  @@map("categories")
}

model BankQuestion {
  id            String              @id @default(cuid())
  teamId        String              @map("team_id")
  type          QuestionType
  text          String
  points        Int                 @default(1)
  hint          String?
  explanation   String?
  difficulty    QuestionDifficulty @default(MEDIUM)
  aiGenerated   Boolean             @default(false) @map("ai_generated")
  aiMetadata    Json?               @map("ai_metadata")
  createdById   String              @map("created_by_id")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  
  team                   Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdBy              User                     @relation(fields: [createdById], references: [id])
  options                BankQuestionOption[]
  media                  BankQuestionMedia[]
  tags                   BankQuestionTag[]
  categories             BankQuestionCategory[]
  quizBankQuestions      QuizBankQuestion[]
  
  @@index([teamId])
  @@index([type])
  @@index([difficulty])
  @@index([createdById])
  @@map("bank_questions")
}

model BankQuestionOption {
  id               String       @id @default(cuid())
  bankQuestionId   String       @map("bank_question_id")
  text             String
  isCorrect        Boolean      @default(false) @map("is_correct")
  order            Int          @default(0)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  
  bankQuestion     BankQuestion @relation(fields: [bankQuestionId], references: [id], onDelete: Cascade)
  
  @@index([bankQuestionId])
  @@map("bank_question_options")
}

model BankQuestionMedia {
  id               String       @id @default(cuid())
  bankQuestionId   String       @map("bank_question_id")
  url              String
  type             MediaType
  fileName         String       @map("file_name")
  fileSize         Int          @map("file_size")
  mimeType         String       @map("mime_type")
  order            Int          @default(0)
  createdAt        DateTime     @default(now()) @map("created_at")
  
  bankQuestion     BankQuestion @relation(fields: [bankQuestionId], references: [id], onDelete: Cascade)
  
  @@index([bankQuestionId])
  @@map("bank_question_media")
}

model BankQuestionTag {
  id               String       @id @default(cuid())
  bankQuestionId   String       @map("bank_question_id")
  tagId            String       @map("tag_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  
  bankQuestion     BankQuestion @relation(fields: [bankQuestionId], references: [id], onDelete: Cascade)
  tag              Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([bankQuestionId, tagId])
  @@index([bankQuestionId])
  @@index([tagId])
  @@map("bank_question_tags")
}

model BankQuestionCategory {
  id               String       @id @default(cuid())
  bankQuestionId   String       @map("bank_question_id")
  categoryId       String       @map("category_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  
  bankQuestion     BankQuestion @relation(fields: [bankQuestionId], references: [id], onDelete: Cascade)
  category         Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([bankQuestionId, categoryId])
  @@index([bankQuestionId])
  @@index([categoryId])
  @@map("bank_question_categories")
}

model QuizBankQuestion {
  id               String       @id @default(cuid())
  quizId           String       @map("quiz_id")
  bankQuestionId   String       @map("bank_question_id")
  questionId       String       @map("question_id")
  importedAt       DateTime     @default(now()) @map("imported_at")
  
  quiz             Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  bankQuestion     BankQuestion @relation(fields: [bankQuestionId], references: [id])
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([questionId])
  @@index([quizId])
  @@index([bankQuestionId])
  @@map("quiz_bank_questions")
}

// ============================================
// Certificate Models
// ============================================

model CertificateTemplate {
  id                String              @id @default(cuid())
  teamId            String              @map("team_id")
  name              String
  description       String?
  design            Json                // Stores design configuration
  backgroundImage   String?             @map("background_image")
  logoImage         String?             @map("logo_image")
  signatureImage    String?             @map("signature_image")
  isActive          Boolean             @default(true) @map("is_active")
  createdById       String              @map("created_by_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  team              Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdBy         User                @relation(fields: [createdById], references: [id])
  certificates      Certificate[]
  quizTemplates     QuizCertificateTemplate[]
  
  @@index([teamId])
  @@index([createdById])
  @@map("certificate_templates")
}

model Certificate {
  id                String              @id @default(cuid())
  templateId        String              @map("template_id")
  quizResponseId    String              @map("quiz_response_id")
  recipientName     String              @map("recipient_name")
  recipientEmail    String              @map("recipient_email")
  issueDate         DateTime            @default(now()) @map("issue_date")
  expiryDate        DateTime?           @map("expiry_date")
  validationCode    String              @unique @map("validation_code")
  qrCode            String?             @map("qr_code")
  pdfUrl            String?             @map("pdf_url")
  status            CertificateStatus   @default(ACTIVE)
  metadata          Json?               // Additional certificate data
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  template          CertificateTemplate @relation(fields: [templateId], references: [id])
  quizResponse      QuizResponse        @relation(fields: [quizResponseId], references: [id], onDelete: Cascade)
  verifications     CertificateVerification[]
  
  @@index([templateId])
  @@index([quizResponseId])
  @@index([validationCode])
  @@index([recipientEmail])
  @@map("certificates")
}

model CertificateVerification {
  id            String      @id @default(cuid())
  certificateId String
  verifiedAt    DateTime    @default(now())
  ipAddress     String?
  userAgent     String?

  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  @@index([certificateId])
}

model QuizCertificateTemplate {
  id                String              @id @default(cuid())
  quizId            String              @map("quiz_id")
  templateId        String              @map("template_id")
  minScorePercent   Int                 @map("min_score_percent") // Minimum score percentage required
  validityDays      Int?                @map("validity_days") // Certificate validity in days
  createdAt         DateTime            @default(now()) @map("created_at")
  
  quiz              Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  template          CertificateTemplate @relation(fields: [templateId], references: [id])
  
  @@unique([quizId, templateId])
  @@index([quizId])
  @@index([templateId])
  @@map("quiz_certificate_templates")
}

// ============================================
// Notification System Models
// ============================================

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String           @db.VarChar(255)
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  userId    String           @map("user_id")
  teamId    String?          @map("team_id")
  entityId  String?          @map("entity_id") // Reference to related entity (quiz, team, etc.)
  entityType String?         @map("entity_type") // Type of related entity
  metadata  Json?            // Additional notification data
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  readAt    DateTime?        @map("read_at")
  
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  team      Team?            @relation("TeamNotifications", fields: [teamId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([teamId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                    String             @id @default(cuid())
  userId                String             @map("user_id")
  emailNotifications    Boolean            @default(true) @map("email_notifications")
  inAppNotifications    Boolean            @default(true) @map("in_app_notifications")
  quizCompletion        Boolean            @default(true) @map("quiz_completion")
  teamInvitation        Boolean            @default(true) @map("team_invitation")
  quizShared            Boolean            @default(true) @map("quiz_shared")
  systemUpdates         Boolean            @default(true) @map("system_updates")
  marketingEmails       Boolean            @default(false) @map("marketing_emails")
  weeklyDigest          Boolean            @default(true) @map("weekly_digest")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  
  user                  User               @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
  @@index([userId])
  @@map("notification_preferences")
}

enum NotificationType {
  QUIZ_COMPLETED
  QUIZ_SHARED
  TEAM_INVITATION
  TEAM_MEMBER_JOINED
  SUBSCRIPTION_UPDATED
  PAYMENT_FAILED
  SYSTEM_UPDATE
  CERTIFICATE_ISSUED
  QUIZ_PUBLISHED
  QUIZ_RESPONSE_RECEIVED
  STORAGE_LIMIT_WARNING
  PLAN_LIMIT_WARNING
}
