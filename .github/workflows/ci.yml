name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    paths:
      - 'web/src/**'
      - 'web/prisma/**'
      - 'web/package.json'
      - 'web/tsconfig.json'
      - '.github/workflows/**'

jobs:
  # 依存関係のインストールとキャッシュを共有する基盤ジョブ
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache node modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            web/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
        working-directory: ./web

      - name: Generate Prisma client
        run: pnpm db:generate
        working-directory: ./web
        env:
          DATABASE_URL: "postgresql://postgres:password@localhost:5432/test_db"

      - name: Cache Prisma client
        uses: actions/cache@v4
        with:
          path: web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('web/prisma/schema.prisma') }}

  # 型チェックとリント（軽量なので並列実行）
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            web/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web/pnpm-lock.yaml') }}

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: TypeScript type checking
        run: pnpm type-check
        working-directory: ./web

      - name: Format check
        run: pnpm format
        working-directory: ./web

      - name: Lint
        run: pnpm lint
        working-directory: ./web

  # データベースとPrismaのテスト
  database:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            web/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web/pnpm-lock.yaml') }}

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Run Prisma migrations
        run: pnpm db:migrate
        working-directory: ./web

      - name: Run Prisma migration validation
        run: |
          pnpm exec prisma migrate status
          echo "✅ Prisma migrations validated successfully"
        working-directory: ./web

  # ビルドテスト
  build:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            web/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web/pnpm-lock.yaml') }}

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Build application
        run: pnpm build
        working-directory: ./web

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: web/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

  # E2Eテスト（Playwright）
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            web/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('web/pnpm-lock.yaml') }}

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Run Prisma migrations
        run: pnpm db:migrate
        working-directory: ./web

      - name: Build application
        run: pnpm build
        working-directory: ./web

      - name: Install Playwright Browsers
        run: pnpm playwright install --with-deps
        working-directory: ./web

      - name: Run Playwright tests
        run: pnpm test:fast
        working-directory: ./web
        env:
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 30

  # すべてのジョブが成功したことを確認する集約ジョブ
  ci-success:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, database, build, e2e-tests]
    if: always()
    steps:
      - name: Check all jobs success
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "❌ CI failed"
          exit 1
      - name: CI Success
        run: echo "✅ All CI jobs completed successfully"
