name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    paths:
      - 'web/src/**'
      - 'web/prisma/**'
      - 'web/package.json'
      - 'web/tsconfig.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/**'

defaults:
  run:
    working-directory: .

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.12.3'


jobs:
  # 依存関係のインストールとキャッシュを共有する基盤ジョブ
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Cache node modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            /tmp/.pnpm-store
          key: ${{ runner.os }}-npm-v2-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v2-

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Cache Prisma client
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-v2-${{ hashFiles('web/prisma/schema.prisma') }}

  # 型チェックとリント（軽量なので並列実行）
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-v2-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-v2-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Generate Prisma client
        run: npx prisma generate

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Format check
        run: npx prettier --check .

      - name: Lint
        run: npm run lint

  # データベースとPrismaのテスト
  database:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-v2-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-v2-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Run Prisma migrations
        run: npx prisma db push --force-reset

      - name: Run Prisma seed
        run: npx prisma db seed

  # ビルドテスト
  build:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-v2-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-v2-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Build application
        run: npm run build

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: web/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

  # E2Eテスト（Playwright）
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}


      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-v2-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-v2-${{ hashFiles('web/prisma/schema.prisma') }}

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Run Prisma migrations
        run: npx prisma db push --force-reset

      - name: Run Prisma seed
        run: npx prisma db seed

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test --project=chromium --shard=${{ matrix.shard }}/10
        continue-on-error: true
        env:
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.shard }}
          path: web/playwright-report/
          retention-days: 30

  # すべてのジョブが成功したことを確認する集約ジョブ
  ci-success:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, database, build, e2e-tests]
    if: always()
    defaults:
      run:
        working-directory: .
    steps:
      - name: Check critical jobs success
        if: contains(needs.lint-and-typecheck.result, 'failure') || contains(needs.database.result, 'failure') || contains(needs.build.result, 'failure')
        run: |
          echo "❌ Critical CI jobs failed"
          exit 1
      - name: CI Success
        run: |
          echo "✅ CI completed successfully"
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "⚠️  Some E2E tests failed, but CI continues"
          fi
